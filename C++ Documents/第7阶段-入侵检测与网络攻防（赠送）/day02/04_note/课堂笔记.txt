
1 nessus 漏扫工具
    安装方式
        将deb安装包上传到 kali

        dpkg -i <安装包地址>
        /etc/init.d/nessusd start

        打开浏览器访问 nessus的服务
            https://ip:8834/
                报错，证书不能够验证（证书是自签），添加例外，强制访问

            1 创建管理员账号以及密码
            2 激活，填入激活码
            3 等待线上安装插件

    如果线上安装失败，此时就要执行这个
    /opt/nessus/sbin/nessuscli update



    更新成功之后，登录到nessus的管理界面
    添加扫描任务，填入任务名以及扫描的ip地址，保存后开始扫描



2 漏洞信息共享平台
    https://nvd.nist.gov/
    http://cve.mitre.org/
    http://www.cnvd.org.cn/




3 暴力破解
    原理：穷举各个密码，进行破解尝试，如果成功，就找到了对应的密码
        银行卡 000000 - 999999  尝试一遍


    成功率： 100% （密码全集尝试）
    非常耗时间


    从全集挑选一些常用的或者常见的密码进行尝试，成功率也很高，字典攻击
        成功条件：密码字典里边包含一个正确的密码




4 hydra命令
    hydra -l msfadmin -P passwd.txt -e nsr -vV -o ssh_ok.log  192.168.16.204 ssh

        -l msfadmin: 指定用户名msfadmin
        -L 用户名字典   :  指定用户名字典（用户名也要猜）

        -p 单个密码：  尝试单个密码
        -P passwd.txt： 指定字典文件passwd.txt

        -e nsr: 额外检查，n 代表空口令， s代表用户名， r代表用户名称逆序（反向）
            s ->    root : root 
            r ->    root : toor

        -vV: 显示详细过程

        -o ssh_ok.log: 输出login/passwd 对到ssh_ok.log

        192.168.16.204: 靶机IP地址

        ssh: 被攻击的协议
            目前 hydra支持的协议
            adam6500  afp  asterisk  cisco  cisco-enable cvs firebird ftp ftps http[s]-{head|get|post} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc
              ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql(v4) mysql5 ncp nntp oracle oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp radmin2 redis rexec
              rlogin rpcap rsh rtsp s7-300 sapr3 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet[s] vmauthd vnc xmpp




5 字典的获取

    自行构造（最笨的方法）
        crunch 最小长度 最大长度 字符集

        crunch 2 2 abc 
            生成 以 abc3个字符组成的所有2位密码

        crunch 2 2 -f /usr/share/crunch/charset.lst numeric
            指定使用某个字符集文件中的特定字符集



    其他方式
        kali默认自带的字典
            /usr/share/wordlists/rockyou.txt

        互联网上面去下载一些公开的字典

        cupp -l  从仓库去下载一些字典

        cupp -i 跟用户做问答最后生成一个字典


6 暴力破解防御

    暴力破解成功率100%


    用户名的防御：
        保证账号名不要泄露，尽量不要使用黑客能够随便拿到猜到的用户名（公司名，test,admin)

        但是root用户是肯定存在
        $ sudo vi /etc/ssh/sshd_config
            PermitRootLogin yes
            改为 :
            PermitRootLogin no
            或者改为 prohibit-password  不允许root用户使用密码进行登录，但是可以使用证书进行登录

        可以添加以下选项来控制哪些用户可以登录或者不允许登录
        AllowUsers  xxxuser1 xxxuser2
        DenyUsers root xxxuser1 xxxuser2

        控制每个TCP连接尝试次数,客户端重新连接之后还可以继续进行尝试：
        MaxAuthTries 3



    密码的防御：
    只能延长破解时间
        1 锁定账户
        2 扩充密码全集
            控制密码有大小写字符数字下划线等特殊字符组成 6-32位




7 PAM
    标识
        解决一个问题：我是谁
        用户名

        系统有张三李四使用，
            zhangsan  -> 张三 
            lisi      -> 李四

    鉴别
        解决一个问题：我是我
        密码

        密码可以改为其他的鉴别方式，指纹、刷脸....


    ubuntu
        ssh登录  ->   输入用户名 -> 密码   -> 进入命令行交互界面
        GUI登录  ->   输入用户名 -> 指纹   -> 进入GUI的桌面


    鉴别的方式随着计算的发展进行调整，需要一个可插拔的方式来实现鉴别的调整  PAM


    linux 什么时候 会触发鉴权？
        1 登录
        2 sudo
        3 passwd
        4 chsh



    pam配置文件的格式
        正常 pam.conf 是5列 ，因为后面每个服务都单独写一个pam文件
            放到 /etc/pam.d  ，第一列是废掉了
    type control module-path module-arguments

    简单理解： 每一行其实就是调用 特定so中的某个接口顺便传参，也是使用配置文件进行编程

    1  type 第一栏，认证鉴别接口类型：（四类接口）
        auth：表示鉴别类接口模块类型用于检查用户和密码，并分配权限
        account：表示账户类接口，主要负责账户合法性检查，确认帐号是否过期，是否有权限登录系统等；
        session：会话类接口。实现从用户登录成功到退出的会话控制；
        password：口令类接口。控制用户更改密码的全过程。
        
        简单说，就是一个接口名字

    2   control  是控制语句

    3   so模块的地址，只需要填文件名，自动去 /lib/x86_64-linux-gnu/security

    4   模块参数



    common-password

    password        [success=1 default=ignore]      pam_unix.so obscure sha512
        调用 pam_unix.so 里边的password 接口 ，传参 obscure sha512
        如果返回值是 success 跳过下一个 password 类型的接口  ，否则继续走以下步骤

    password        requisite                       pam_deny.so
        不管调用pam_deny.so 的哪个接口都是拒绝，如果调用到，以下几个步骤不用走

    password        required                        pam_permit.so
        调用 pam_permit 模块 恒返回成功


pam 弱口令的保护
    sudo apt install libpam_cracklib

    安装完之后
    /etc/pam.d/common-password 文件会自动被修改

    关于 密码的强度控制可以 使用以下选项
    o   retry=3 键入口令错误时，重复次数
    o   minlen=8 口令最小长度
    o   lcredit=-1 小写字符至少为1 
        负数表示至少多少个

    o   ucredit=-1 大写字母至少为1
        同上，控制大写的字符

    o   dcredit=-1 数字至少为1

    o   ocredit=-1 特殊字符至少为1

    o   difok=3 新旧口令差别至少3个字符
        原密码：123456 
        新密码：234567

    o   reject_username 口令中，不允许包括用户名称（正序和逆序）   


    设置了以上选项之后，此时需要设置一个密码
        Heima,1234


    暴力破解的锁定账户控制
    向 /etc/pam.d 中的 su sudo sshd 中添加 pam_tally 的调用
    auth required pam_tally.so unlock_time=锁定多少秒 deny=登录错误的次数
    锁定时间要斟酌不是越长越好，如果时间太长会妨碍正常使用的用户


8 shadow密码的破解
    root:$6$WQJmEIbE$u5gns7kaUXd6GdTgNpoFNDGpmdU4O7qPf3DgNCHg57wgOIuwEXKorlZczhBWVoNV6EG8DvkajzYeP8Sgye8Vq1:18015:0:99999:7:::

    第二列就是该用户密码的哈希值
        $6$WQJmEIbE$u5gns7kaUXd6GdTgNpoFNDGpmdU4O7qPf3DgNCHg57wgOIuwEXKorlZczhBWVoNV6EG8DvkajzYeP8Sgye8Vq1

        该字符串的组成形式 $id$salt$encrypted    是以$符号作为分隔符的3列信息

        id    密码加密算法id
              ID  | Method
              ─────────────────────────────────────────────────────────
              1   | MD5
              2a  | Blowfish (not in mainline glibc; added in some
                  | Linux distributions)
              5   | SHA-256 (since glibc 2.7)
              6   | SHA-512 (since glibc 2.7)


        salt  盐 （加料）
            添加一个额外的随机字符串然后再使用哈希算法来计算密码哈希
            1 增加安全性
            2 增加迷惑性
                a用户密码是123456
                b用户密码也是123456


        encrypted
            密码的哈希


    普及知识：
        以下三种类型的计算方式 都是 讲一段数据计算成为另一段数据

        编码   base64
            算法公开，可逆

        加密   des 3des rsa ...
            可逆，加密需要加密密钥，解密也需要解密密钥
            根据加密和解密的密钥是否相等分为对称和非对称

        哈希 MD5 sha1 sha2 sha-256 ...
            将一段数据计算成为一段固定长度的数据，不可逆
            只要两段数据二进制是相同的，计算的结果也是一样的




    使用hashcat来破解shadow文件中的密码哈希
        hashcat -m 1800 <密码哈希的文件> <字典文件>
        
        hashcat依赖硬件资源










