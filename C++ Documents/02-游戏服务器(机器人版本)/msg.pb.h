// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto 

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_2eproto
namespace pb {
class BroadCast;
class BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class ChangeWorldRequest;
class ChangeWorldRequestDefaultTypeInternal;
extern ChangeWorldRequestDefaultTypeInternal _ChangeWorldRequest_default_instance_;
class ChangeWorldResponse;
class ChangeWorldResponseDefaultTypeInternal;
extern ChangeWorldResponseDefaultTypeInternal _ChangeWorldResponse_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SkillContact;
class SkillContactDefaultTypeInternal;
extern SkillContactDefaultTypeInternal _SkillContact_default_instance_;
class SkillTrigger;
class SkillTriggerDefaultTypeInternal;
extern SkillTriggerDefaultTypeInternal _SkillTrigger_default_instance_;
class SyncPid;
class SyncPidDefaultTypeInternal;
extern SyncPidDefaultTypeInternal _SyncPid_default_instance_;
class SyncPlayers;
class SyncPlayersDefaultTypeInternal;
extern SyncPlayersDefaultTypeInternal _SyncPlayers_default_instance_;
class Talk;
class TalkDefaultTypeInternal;
extern TalkDefaultTypeInternal _Talk_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::BroadCast* Arena::CreateMaybeMessage<::pb::BroadCast>(Arena*);
template<> ::pb::ChangeWorldRequest* Arena::CreateMaybeMessage<::pb::ChangeWorldRequest>(Arena*);
template<> ::pb::ChangeWorldResponse* Arena::CreateMaybeMessage<::pb::ChangeWorldResponse>(Arena*);
template<> ::pb::Player* Arena::CreateMaybeMessage<::pb::Player>(Arena*);
template<> ::pb::Position* Arena::CreateMaybeMessage<::pb::Position>(Arena*);
template<> ::pb::SkillContact* Arena::CreateMaybeMessage<::pb::SkillContact>(Arena*);
template<> ::pb::SkillTrigger* Arena::CreateMaybeMessage<::pb::SkillTrigger>(Arena*);
template<> ::pb::SyncPid* Arena::CreateMaybeMessage<::pb::SyncPid>(Arena*);
template<> ::pb::SyncPlayers* Arena::CreateMaybeMessage<::pb::SyncPlayers>(Arena*);
template<> ::pb::Talk* Arena::CreateMaybeMessage<::pb::Talk>(Arena*);
template<> ::pb::Velocity* Arena::CreateMaybeMessage<::pb::Velocity>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class SyncPid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SyncPid) */ {
 public:
  SyncPid();
  virtual ~SyncPid();

  SyncPid(const SyncPid& from);

  inline SyncPid& operator=(const SyncPid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncPid(SyncPid&& from) noexcept
    : SyncPid() {
    *this = ::std::move(from);
  }

  inline SyncPid& operator=(SyncPid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPid* internal_default_instance() {
    return reinterpret_cast<const SyncPid*>(
               &_SyncPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SyncPid* other);
  friend void swap(SyncPid& a, SyncPid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncPid* New() const final {
    return CreateMaybeMessage<SyncPid>(NULL);
  }

  SyncPid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncPid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncPid& from);
  void MergeFrom(const SyncPid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SyncPid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Player* other);
  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(NULL);
  }

  Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .pb.Position P = 2;
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 2;
  private:
  const ::pb::Position& _internal_p() const;
  public:
  const ::pb::Position& p() const;
  ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::pb::Position* p_;
  ::google::protobuf::int32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncPlayers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SyncPlayers) */ {
 public:
  SyncPlayers();
  virtual ~SyncPlayers();

  SyncPlayers(const SyncPlayers& from);

  inline SyncPlayers& operator=(const SyncPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncPlayers(SyncPlayers&& from) noexcept
    : SyncPlayers() {
    *this = ::std::move(from);
  }

  inline SyncPlayers& operator=(SyncPlayers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncPlayers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPlayers* internal_default_instance() {
    return reinterpret_cast<const SyncPlayers*>(
               &_SyncPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SyncPlayers* other);
  friend void swap(SyncPlayers& a, SyncPlayers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayers* New() const final {
    return CreateMaybeMessage<SyncPlayers>(NULL);
  }

  SyncPlayers* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayers>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncPlayers& from);
  void MergeFrom(const SyncPlayers& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Player ps = 1;
  int ps_size() const;
  void clear_ps();
  static const int kPsFieldNumber = 1;
  ::pb::Player* mutable_ps(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Player >*
      mutable_ps();
  const ::pb::Player& ps(int index) const;
  ::pb::Player* add_ps();
  const ::google::protobuf::RepeatedPtrField< ::pb::Player >&
      ps() const;

  // @@protoc_insertion_point(class_scope:pb.SyncPlayers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Player > ps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float V = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  float v() const;
  void set_v(float value);

  // int32 BloodValue = 5;
  void clear_bloodvalue();
  static const int kBloodValueFieldNumber = 5;
  ::google::protobuf::int32 bloodvalue() const;
  void set_bloodvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float v_;
  ::google::protobuf::int32 bloodvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Velocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Velocity) */ {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Velocity* other);
  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(NULL);
  }

  Velocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float Z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:pb.Velocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadCast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BroadCast) */ {
 public:
  BroadCast();
  virtual ~BroadCast();

  BroadCast(const BroadCast& from);

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadCast& default_instance();

  enum DataCase {
    kContent = 3,
    kP = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BroadCast* other);
  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadCast* New() const final {
    return CreateMaybeMessage<BroadCast>(NULL);
  }

  BroadCast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadCast& from);
  void MergeFrom(const BroadCast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Username = 6;
  void clear_username();
  static const int kUsernameFieldNumber = 6;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 Tp = 2;
  void clear_tp();
  static const int kTpFieldNumber = 2;
  ::google::protobuf::int32 tp() const;
  void set_tp(::google::protobuf::int32 value);

  // string Content = 3;
  private:
  bool has_content() const;
  public:
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .pb.Position P = 4;
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 4;
  private:
  const ::pb::Position& _internal_p() const;
  public:
  const ::pb::Position& p() const;
  ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);

  // int32 ActionData = 5;
  private:
  bool has_actiondata() const;
  public:
  void clear_actiondata();
  static const int kActionDataFieldNumber = 5;
  ::google::protobuf::int32 actiondata() const;
  void set_actiondata(::google::protobuf::int32 value);

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:pb.BroadCast)
 private:
  void set_has_content();
  void set_has_p();
  void set_has_actiondata();

  inline bool has_Data() const;
  inline void clear_has_Data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 tp_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::pb::Position* p_;
    ::google::protobuf::int32 actiondata_;
  } Data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Talk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Talk) */ {
 public:
  Talk();
  virtual ~Talk();

  Talk(const Talk& from);

  inline Talk& operator=(const Talk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Talk(Talk&& from) noexcept
    : Talk() {
    *this = ::std::move(from);
  }

  inline Talk& operator=(Talk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Talk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Talk* internal_default_instance() {
    return reinterpret_cast<const Talk*>(
               &_Talk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Talk* other);
  friend void swap(Talk& a, Talk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Talk* New() const final {
    return CreateMaybeMessage<Talk>(NULL);
  }

  Talk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Talk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Talk& from);
  void MergeFrom(const Talk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pb.Talk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SkillTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SkillTrigger) */ {
 public:
  SkillTrigger();
  virtual ~SkillTrigger();

  SkillTrigger(const SkillTrigger& from);

  inline SkillTrigger& operator=(const SkillTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SkillTrigger(SkillTrigger&& from) noexcept
    : SkillTrigger() {
    *this = ::std::move(from);
  }

  inline SkillTrigger& operator=(SkillTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillTrigger* internal_default_instance() {
    return reinterpret_cast<const SkillTrigger*>(
               &_SkillTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SkillTrigger* other);
  friend void swap(SkillTrigger& a, SkillTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillTrigger* New() const final {
    return CreateMaybeMessage<SkillTrigger>(NULL);
  }

  SkillTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SkillTrigger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SkillTrigger& from);
  void MergeFrom(const SkillTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Position P = 3;
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 3;
  private:
  const ::pb::Position& _internal_p() const;
  public:
  const ::pb::Position& p() const;
  ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);

  // .pb.Velocity V = 4;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 4;
  private:
  const ::pb::Velocity& _internal_v() const;
  public:
  const ::pb::Velocity& v() const;
  ::pb::Velocity* release_v();
  ::pb::Velocity* mutable_v();
  void set_allocated_v(::pb::Velocity* v);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 SkillId = 2;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // int32 BulletId = 5;
  void clear_bulletid();
  static const int kBulletIdFieldNumber = 5;
  ::google::protobuf::int32 bulletid() const;
  void set_bulletid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Position* p_;
  ::pb::Velocity* v_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 bulletid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SkillContact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SkillContact) */ {
 public:
  SkillContact();
  virtual ~SkillContact();

  SkillContact(const SkillContact& from);

  inline SkillContact& operator=(const SkillContact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SkillContact(SkillContact&& from) noexcept
    : SkillContact() {
    *this = ::std::move(from);
  }

  inline SkillContact& operator=(SkillContact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillContact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SkillContact* internal_default_instance() {
    return reinterpret_cast<const SkillContact*>(
               &_SkillContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SkillContact* other);
  friend void swap(SkillContact& a, SkillContact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SkillContact* New() const final {
    return CreateMaybeMessage<SkillContact>(NULL);
  }

  SkillContact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SkillContact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SkillContact& from);
  void MergeFrom(const SkillContact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillContact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Position ContactPos = 5;
  bool has_contactpos() const;
  void clear_contactpos();
  static const int kContactPosFieldNumber = 5;
  private:
  const ::pb::Position& _internal_contactpos() const;
  public:
  const ::pb::Position& contactpos() const;
  ::pb::Position* release_contactpos();
  ::pb::Position* mutable_contactpos();
  void set_allocated_contactpos(::pb::Position* contactpos);

  // int32 SrcPid = 1;
  void clear_srcpid();
  static const int kSrcPidFieldNumber = 1;
  ::google::protobuf::int32 srcpid() const;
  void set_srcpid(::google::protobuf::int32 value);

  // int32 TargetPid = 2;
  void clear_targetpid();
  static const int kTargetPidFieldNumber = 2;
  ::google::protobuf::int32 targetpid() const;
  void set_targetpid(::google::protobuf::int32 value);

  // int32 SkillId = 3;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // int32 BulletId = 4;
  void clear_bulletid();
  static const int kBulletIdFieldNumber = 4;
  ::google::protobuf::int32 bulletid() const;
  void set_bulletid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillContact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Position* contactpos_;
  ::google::protobuf::int32 srcpid_;
  ::google::protobuf::int32 targetpid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 bulletid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeWorldRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ChangeWorldRequest) */ {
 public:
  ChangeWorldRequest();
  virtual ~ChangeWorldRequest();

  ChangeWorldRequest(const ChangeWorldRequest& from);

  inline ChangeWorldRequest& operator=(const ChangeWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeWorldRequest(ChangeWorldRequest&& from) noexcept
    : ChangeWorldRequest() {
    *this = ::std::move(from);
  }

  inline ChangeWorldRequest& operator=(ChangeWorldRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeWorldRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeWorldRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeWorldRequest*>(
               &_ChangeWorldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ChangeWorldRequest* other);
  friend void swap(ChangeWorldRequest& a, ChangeWorldRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeWorldRequest* New() const final {
    return CreateMaybeMessage<ChangeWorldRequest>(NULL);
  }

  ChangeWorldRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeWorldRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeWorldRequest& from);
  void MergeFrom(const ChangeWorldRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeWorldRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 SrcId = 2;
  void clear_srcid();
  static const int kSrcIdFieldNumber = 2;
  ::google::protobuf::int32 srcid() const;
  void set_srcid(::google::protobuf::int32 value);

  // int32 TargetId = 3;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ChangeWorldRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 srcid_;
  ::google::protobuf::int32 targetid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeWorldResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ChangeWorldResponse) */ {
 public:
  ChangeWorldResponse();
  virtual ~ChangeWorldResponse();

  ChangeWorldResponse(const ChangeWorldResponse& from);

  inline ChangeWorldResponse& operator=(const ChangeWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeWorldResponse(ChangeWorldResponse&& from) noexcept
    : ChangeWorldResponse() {
    *this = ::std::move(from);
  }

  inline ChangeWorldResponse& operator=(ChangeWorldResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeWorldResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeWorldResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeWorldResponse*>(
               &_ChangeWorldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ChangeWorldResponse* other);
  friend void swap(ChangeWorldResponse& a, ChangeWorldResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeWorldResponse* New() const final {
    return CreateMaybeMessage<ChangeWorldResponse>(NULL);
  }

  ChangeWorldResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeWorldResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeWorldResponse& from);
  void MergeFrom(const ChangeWorldResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeWorldResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Position P = 5;
  bool has_p() const;
  void clear_p();
  static const int kPFieldNumber = 5;
  private:
  const ::pb::Position& _internal_p() const;
  public:
  const ::pb::Position& p() const;
  ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);

  // int32 Pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // int32 ChangeRes = 2;
  void clear_changeres();
  static const int kChangeResFieldNumber = 2;
  ::google::protobuf::int32 changeres() const;
  void set_changeres(::google::protobuf::int32 value);

  // int32 SrcId = 3;
  void clear_srcid();
  static const int kSrcIdFieldNumber = 3;
  ::google::protobuf::int32 srcid() const;
  void set_srcid(::google::protobuf::int32 value);

  // int32 TargetId = 4;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 4;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ChangeWorldResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Position* p_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 changeres_;
  ::google::protobuf::int32 srcid_;
  ::google::protobuf::int32 targetid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPid

// int32 Pid = 1;
inline void SyncPid::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 SyncPid::pid() const {
  // @@protoc_insertion_point(field_get:pb.SyncPid.Pid)
  return pid_;
}
inline void SyncPid::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.SyncPid.Pid)
}

// string Username = 2;
inline void SyncPid::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncPid::username() const {
  // @@protoc_insertion_point(field_get:pb.SyncPid.Username)
  return username_.GetNoArena();
}
inline void SyncPid::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SyncPid.Username)
}
#if LANG_CXX11
inline void SyncPid::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SyncPid.Username)
}
#endif
inline void SyncPid::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SyncPid.Username)
}
inline void SyncPid::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SyncPid.Username)
}
inline ::std::string* SyncPid::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.SyncPid.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncPid::release_username() {
  // @@protoc_insertion_point(field_release:pb.SyncPid.Username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPid::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.SyncPid.Username)
}

// -------------------------------------------------------------------

// Player

// int32 Pid = 1;
inline void Player::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 Player::pid() const {
  // @@protoc_insertion_point(field_get:pb.Player.Pid)
  return pid_;
}
inline void Player::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.Player.Pid)
}

// .pb.Position P = 2;
inline bool Player::has_p() const {
  return this != internal_default_instance() && p_ != NULL;
}
inline void Player::clear_p() {
  if (GetArenaNoVirtual() == NULL && p_ != NULL) {
    delete p_;
  }
  p_ = NULL;
}
inline const ::pb::Position& Player::_internal_p() const {
  return *p_;
}
inline const ::pb::Position& Player::p() const {
  const ::pb::Position* p = p_;
  // @@protoc_insertion_point(field_get:pb.Player.P)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline ::pb::Position* Player::release_p() {
  // @@protoc_insertion_point(field_release:pb.Player.P)
  
  ::pb::Position* temp = p_;
  p_ = NULL;
  return temp;
}
inline ::pb::Position* Player::mutable_p() {
  
  if (p_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaNoVirtual());
    p_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Player.P)
  return p_;
}
inline void Player::set_allocated_p(::pb::Position* p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_;
  }
  if (p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:pb.Player.P)
}

// string Username = 3;
inline void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:pb.Player.Username)
  return username_.GetNoArena();
}
inline void Player::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Player.Username)
}
#if LANG_CXX11
inline void Player::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Player.Username)
}
#endif
inline void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Player.Username)
}
inline void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Player.Username)
}
inline ::std::string* Player::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.Player.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:pb.Player.Username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.Player.Username)
}

// -------------------------------------------------------------------

// SyncPlayers

// repeated .pb.Player ps = 1;
inline int SyncPlayers::ps_size() const {
  return ps_.size();
}
inline void SyncPlayers::clear_ps() {
  ps_.Clear();
}
inline ::pb::Player* SyncPlayers::mutable_ps(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SyncPlayers.ps)
  return ps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Player >*
SyncPlayers::mutable_ps() {
  // @@protoc_insertion_point(field_mutable_list:pb.SyncPlayers.ps)
  return &ps_;
}
inline const ::pb::Player& SyncPlayers::ps(int index) const {
  // @@protoc_insertion_point(field_get:pb.SyncPlayers.ps)
  return ps_.Get(index);
}
inline ::pb::Player* SyncPlayers::add_ps() {
  // @@protoc_insertion_point(field_add:pb.SyncPlayers.ps)
  return ps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Player >&
SyncPlayers::ps() const {
  // @@protoc_insertion_point(field_list:pb.SyncPlayers.ps)
  return ps_;
}

// -------------------------------------------------------------------

// Position

// float X = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:pb.Position.X)
  return x_;
}
inline void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.X)
}

// float Y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:pb.Position.Y)
  return y_;
}
inline void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.Y)
}

// float Z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:pb.Position.Z)
  return z_;
}
inline void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.Z)
}

// float V = 4;
inline void Position::clear_v() {
  v_ = 0;
}
inline float Position::v() const {
  // @@protoc_insertion_point(field_get:pb.Position.V)
  return v_;
}
inline void Position::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.V)
}

// int32 BloodValue = 5;
inline void Position::clear_bloodvalue() {
  bloodvalue_ = 0;
}
inline ::google::protobuf::int32 Position::bloodvalue() const {
  // @@protoc_insertion_point(field_get:pb.Position.BloodValue)
  return bloodvalue_;
}
inline void Position::set_bloodvalue(::google::protobuf::int32 value) {
  
  bloodvalue_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.BloodValue)
}

// -------------------------------------------------------------------

// Velocity

// float X = 1;
inline void Velocity::clear_x() {
  x_ = 0;
}
inline float Velocity::x() const {
  // @@protoc_insertion_point(field_get:pb.Velocity.X)
  return x_;
}
inline void Velocity::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.Velocity.X)
}

// float Y = 2;
inline void Velocity::clear_y() {
  y_ = 0;
}
inline float Velocity::y() const {
  // @@protoc_insertion_point(field_get:pb.Velocity.Y)
  return y_;
}
inline void Velocity::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.Velocity.Y)
}

// float Z = 3;
inline void Velocity::clear_z() {
  z_ = 0;
}
inline float Velocity::z() const {
  // @@protoc_insertion_point(field_get:pb.Velocity.Z)
  return z_;
}
inline void Velocity::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.Velocity.Z)
}

// -------------------------------------------------------------------

// BroadCast

// int32 Pid = 1;
inline void BroadCast::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 BroadCast::pid() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Pid)
  return pid_;
}
inline void BroadCast::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.BroadCast.Pid)
}

// int32 Tp = 2;
inline void BroadCast::clear_tp() {
  tp_ = 0;
}
inline ::google::protobuf::int32 BroadCast::tp() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Tp)
  return tp_;
}
inline void BroadCast::set_tp(::google::protobuf::int32 value) {
  
  tp_ = value;
  // @@protoc_insertion_point(field_set:pb.BroadCast.Tp)
}

// string Content = 3;
inline bool BroadCast::has_content() const {
  return Data_case() == kContent;
}
inline void BroadCast::set_has_content() {
  _oneof_case_[0] = kContent;
}
inline void BroadCast::clear_content() {
  if (has_content()) {
    Data_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Data();
  }
}
inline const ::std::string& BroadCast::content() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Content)
  if (has_content()) {
    return Data_.content_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BroadCast::set_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
}
#if LANG_CXX11
inline void BroadCast::set_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BroadCast.Content)
}
#endif
inline void BroadCast::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BroadCast.Content)
}
inline void BroadCast::set_content(const char* value, size_t size) {
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Data_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BroadCast.Content)
}
inline ::std::string* BroadCast::mutable_content() {
  if (!has_content()) {
    clear_Data();
    set_has_content();
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.Content)
  return Data_.content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadCast::release_content() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.Content)
  if (has_content()) {
    clear_has_Data();
    return Data_.content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BroadCast::set_allocated_content(::std::string* content) {
  if (!has_content()) {
    Data_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Data();
  if (content != NULL) {
    set_has_content();
    Data_.content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BroadCast.Content)
}

// .pb.Position P = 4;
inline bool BroadCast::has_p() const {
  return Data_case() == kP;
}
inline void BroadCast::set_has_p() {
  _oneof_case_[0] = kP;
}
inline void BroadCast::clear_p() {
  if (has_p()) {
    delete Data_.p_;
    clear_has_Data();
  }
}
inline const ::pb::Position& BroadCast::_internal_p() const {
  return *Data_.p_;
}
inline ::pb::Position* BroadCast::release_p() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.P)
  if (has_p()) {
    clear_has_Data();
      ::pb::Position* temp = Data_.p_;
    Data_.p_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::pb::Position& BroadCast::p() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.P)
  return has_p()
      ? *Data_.p_
      : *reinterpret_cast< ::pb::Position*>(&::pb::_Position_default_instance_);
}
inline ::pb::Position* BroadCast::mutable_p() {
  if (!has_p()) {
    clear_Data();
    set_has_p();
    Data_.p_ = CreateMaybeMessage< ::pb::Position >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.P)
  return Data_.p_;
}

// int32 ActionData = 5;
inline bool BroadCast::has_actiondata() const {
  return Data_case() == kActionData;
}
inline void BroadCast::set_has_actiondata() {
  _oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  if (has_actiondata()) {
    Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline ::google::protobuf::int32 BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.ActionData)
  if (has_actiondata()) {
    return Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::set_actiondata(::google::protobuf::int32 value) {
  if (!has_actiondata()) {
    clear_Data();
    set_has_actiondata();
  }
  Data_.actiondata_ = value;
  // @@protoc_insertion_point(field_set:pb.BroadCast.ActionData)
}

// string Username = 6;
inline void BroadCast::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BroadCast::username() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Username)
  return username_.GetNoArena();
}
inline void BroadCast::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.Username)
}
#if LANG_CXX11
inline void BroadCast::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BroadCast.Username)
}
#endif
inline void BroadCast::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BroadCast.Username)
}
inline void BroadCast::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BroadCast.Username)
}
inline ::std::string* BroadCast::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadCast::release_username() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.Username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadCast::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.BroadCast.Username)
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Talk

// string Content = 1;
inline void Talk::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Talk::content() const {
  // @@protoc_insertion_point(field_get:pb.Talk.Content)
  return content_.GetNoArena();
}
inline void Talk::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Talk.Content)
}
#if LANG_CXX11
inline void Talk::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Talk.Content)
}
#endif
inline void Talk::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Talk.Content)
}
inline void Talk::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Talk.Content)
}
inline ::std::string* Talk::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pb.Talk.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Talk::release_content() {
  // @@protoc_insertion_point(field_release:pb.Talk.Content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Talk::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.Talk.Content)
}

// -------------------------------------------------------------------

// SkillTrigger

// int32 Pid = 1;
inline void SkillTrigger::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 SkillTrigger::pid() const {
  // @@protoc_insertion_point(field_get:pb.SkillTrigger.Pid)
  return pid_;
}
inline void SkillTrigger::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillTrigger.Pid)
}

// int32 SkillId = 2;
inline void SkillTrigger::clear_skillid() {
  skillid_ = 0;
}
inline ::google::protobuf::int32 SkillTrigger::skillid() const {
  // @@protoc_insertion_point(field_get:pb.SkillTrigger.SkillId)
  return skillid_;
}
inline void SkillTrigger::set_skillid(::google::protobuf::int32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillTrigger.SkillId)
}

// .pb.Position P = 3;
inline bool SkillTrigger::has_p() const {
  return this != internal_default_instance() && p_ != NULL;
}
inline void SkillTrigger::clear_p() {
  if (GetArenaNoVirtual() == NULL && p_ != NULL) {
    delete p_;
  }
  p_ = NULL;
}
inline const ::pb::Position& SkillTrigger::_internal_p() const {
  return *p_;
}
inline const ::pb::Position& SkillTrigger::p() const {
  const ::pb::Position* p = p_;
  // @@protoc_insertion_point(field_get:pb.SkillTrigger.P)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline ::pb::Position* SkillTrigger::release_p() {
  // @@protoc_insertion_point(field_release:pb.SkillTrigger.P)
  
  ::pb::Position* temp = p_;
  p_ = NULL;
  return temp;
}
inline ::pb::Position* SkillTrigger::mutable_p() {
  
  if (p_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaNoVirtual());
    p_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillTrigger.P)
  return p_;
}
inline void SkillTrigger::set_allocated_p(::pb::Position* p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_;
  }
  if (p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:pb.SkillTrigger.P)
}

// .pb.Velocity V = 4;
inline bool SkillTrigger::has_v() const {
  return this != internal_default_instance() && v_ != NULL;
}
inline void SkillTrigger::clear_v() {
  if (GetArenaNoVirtual() == NULL && v_ != NULL) {
    delete v_;
  }
  v_ = NULL;
}
inline const ::pb::Velocity& SkillTrigger::_internal_v() const {
  return *v_;
}
inline const ::pb::Velocity& SkillTrigger::v() const {
  const ::pb::Velocity* p = v_;
  // @@protoc_insertion_point(field_get:pb.SkillTrigger.V)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Velocity*>(
      &::pb::_Velocity_default_instance_);
}
inline ::pb::Velocity* SkillTrigger::release_v() {
  // @@protoc_insertion_point(field_release:pb.SkillTrigger.V)
  
  ::pb::Velocity* temp = v_;
  v_ = NULL;
  return temp;
}
inline ::pb::Velocity* SkillTrigger::mutable_v() {
  
  if (v_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Velocity>(GetArenaNoVirtual());
    v_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillTrigger.V)
  return v_;
}
inline void SkillTrigger::set_allocated_v(::pb::Velocity* v) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete v_;
  }
  if (v) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      v = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    
  } else {
    
  }
  v_ = v;
  // @@protoc_insertion_point(field_set_allocated:pb.SkillTrigger.V)
}

// int32 BulletId = 5;
inline void SkillTrigger::clear_bulletid() {
  bulletid_ = 0;
}
inline ::google::protobuf::int32 SkillTrigger::bulletid() const {
  // @@protoc_insertion_point(field_get:pb.SkillTrigger.BulletId)
  return bulletid_;
}
inline void SkillTrigger::set_bulletid(::google::protobuf::int32 value) {
  
  bulletid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillTrigger.BulletId)
}

// -------------------------------------------------------------------

// SkillContact

// int32 SrcPid = 1;
inline void SkillContact::clear_srcpid() {
  srcpid_ = 0;
}
inline ::google::protobuf::int32 SkillContact::srcpid() const {
  // @@protoc_insertion_point(field_get:pb.SkillContact.SrcPid)
  return srcpid_;
}
inline void SkillContact::set_srcpid(::google::protobuf::int32 value) {
  
  srcpid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillContact.SrcPid)
}

// int32 TargetPid = 2;
inline void SkillContact::clear_targetpid() {
  targetpid_ = 0;
}
inline ::google::protobuf::int32 SkillContact::targetpid() const {
  // @@protoc_insertion_point(field_get:pb.SkillContact.TargetPid)
  return targetpid_;
}
inline void SkillContact::set_targetpid(::google::protobuf::int32 value) {
  
  targetpid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillContact.TargetPid)
}

// int32 SkillId = 3;
inline void SkillContact::clear_skillid() {
  skillid_ = 0;
}
inline ::google::protobuf::int32 SkillContact::skillid() const {
  // @@protoc_insertion_point(field_get:pb.SkillContact.SkillId)
  return skillid_;
}
inline void SkillContact::set_skillid(::google::protobuf::int32 value) {
  
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillContact.SkillId)
}

// int32 BulletId = 4;
inline void SkillContact::clear_bulletid() {
  bulletid_ = 0;
}
inline ::google::protobuf::int32 SkillContact::bulletid() const {
  // @@protoc_insertion_point(field_get:pb.SkillContact.BulletId)
  return bulletid_;
}
inline void SkillContact::set_bulletid(::google::protobuf::int32 value) {
  
  bulletid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillContact.BulletId)
}

// .pb.Position ContactPos = 5;
inline bool SkillContact::has_contactpos() const {
  return this != internal_default_instance() && contactpos_ != NULL;
}
inline void SkillContact::clear_contactpos() {
  if (GetArenaNoVirtual() == NULL && contactpos_ != NULL) {
    delete contactpos_;
  }
  contactpos_ = NULL;
}
inline const ::pb::Position& SkillContact::_internal_contactpos() const {
  return *contactpos_;
}
inline const ::pb::Position& SkillContact::contactpos() const {
  const ::pb::Position* p = contactpos_;
  // @@protoc_insertion_point(field_get:pb.SkillContact.ContactPos)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline ::pb::Position* SkillContact::release_contactpos() {
  // @@protoc_insertion_point(field_release:pb.SkillContact.ContactPos)
  
  ::pb::Position* temp = contactpos_;
  contactpos_ = NULL;
  return temp;
}
inline ::pb::Position* SkillContact::mutable_contactpos() {
  
  if (contactpos_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaNoVirtual());
    contactpos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillContact.ContactPos)
  return contactpos_;
}
inline void SkillContact::set_allocated_contactpos(::pb::Position* contactpos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contactpos_;
  }
  if (contactpos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contactpos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contactpos, submessage_arena);
    }
    
  } else {
    
  }
  contactpos_ = contactpos;
  // @@protoc_insertion_point(field_set_allocated:pb.SkillContact.ContactPos)
}

// -------------------------------------------------------------------

// ChangeWorldRequest

// int32 Pid = 1;
inline void ChangeWorldRequest::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldRequest::pid() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldRequest.Pid)
  return pid_;
}
inline void ChangeWorldRequest::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldRequest.Pid)
}

// int32 SrcId = 2;
inline void ChangeWorldRequest::clear_srcid() {
  srcid_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldRequest::srcid() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldRequest.SrcId)
  return srcid_;
}
inline void ChangeWorldRequest::set_srcid(::google::protobuf::int32 value) {
  
  srcid_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldRequest.SrcId)
}

// int32 TargetId = 3;
inline void ChangeWorldRequest::clear_targetid() {
  targetid_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldRequest::targetid() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldRequest.TargetId)
  return targetid_;
}
inline void ChangeWorldRequest::set_targetid(::google::protobuf::int32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldRequest.TargetId)
}

// -------------------------------------------------------------------

// ChangeWorldResponse

// int32 Pid = 1;
inline void ChangeWorldResponse::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldResponse::pid() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldResponse.Pid)
  return pid_;
}
inline void ChangeWorldResponse::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldResponse.Pid)
}

// int32 ChangeRes = 2;
inline void ChangeWorldResponse::clear_changeres() {
  changeres_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldResponse::changeres() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldResponse.ChangeRes)
  return changeres_;
}
inline void ChangeWorldResponse::set_changeres(::google::protobuf::int32 value) {
  
  changeres_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldResponse.ChangeRes)
}

// int32 SrcId = 3;
inline void ChangeWorldResponse::clear_srcid() {
  srcid_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldResponse::srcid() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldResponse.SrcId)
  return srcid_;
}
inline void ChangeWorldResponse::set_srcid(::google::protobuf::int32 value) {
  
  srcid_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldResponse.SrcId)
}

// int32 TargetId = 4;
inline void ChangeWorldResponse::clear_targetid() {
  targetid_ = 0;
}
inline ::google::protobuf::int32 ChangeWorldResponse::targetid() const {
  // @@protoc_insertion_point(field_get:pb.ChangeWorldResponse.TargetId)
  return targetid_;
}
inline void ChangeWorldResponse::set_targetid(::google::protobuf::int32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.ChangeWorldResponse.TargetId)
}

// .pb.Position P = 5;
inline bool ChangeWorldResponse::has_p() const {
  return this != internal_default_instance() && p_ != NULL;
}
inline void ChangeWorldResponse::clear_p() {
  if (GetArenaNoVirtual() == NULL && p_ != NULL) {
    delete p_;
  }
  p_ = NULL;
}
inline const ::pb::Position& ChangeWorldResponse::_internal_p() const {
  return *p_;
}
inline const ::pb::Position& ChangeWorldResponse::p() const {
  const ::pb::Position* p = p_;
  // @@protoc_insertion_point(field_get:pb.ChangeWorldResponse.P)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::Position*>(
      &::pb::_Position_default_instance_);
}
inline ::pb::Position* ChangeWorldResponse::release_p() {
  // @@protoc_insertion_point(field_release:pb.ChangeWorldResponse.P)
  
  ::pb::Position* temp = p_;
  p_ = NULL;
  return temp;
}
inline ::pb::Position* ChangeWorldResponse::mutable_p() {
  
  if (p_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaNoVirtual());
    p_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ChangeWorldResponse.P)
  return p_;
}
inline void ChangeWorldResponse::set_allocated_p(::pb::Position* p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_;
  }
  if (p) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:pb.ChangeWorldResponse.P)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_2eproto
